-- MySQL Script generated by MySQL Workbench
-- sam. 25 juin 2022 21:51:56
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema Jarvis
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Jarvis
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Jarvis` DEFAULT CHARACTER SET utf8mb3 ;
USE `Jarvis` ;

-- -----------------------------------------------------
-- Table `Jarvis`.`Utilisateur`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Utilisateur` (
  `id_u` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `prenom_u` VARCHAR(100) NOT NULL,
  `nom_u` VARCHAR(100) NOT NULL,
  `date_de_naissance` DATE NOT NULL,
  `email_u` VARCHAR(50) NOT NULL,
  `sexe` VARCHAR(1) NULL DEFAULT NULL,
  `mdp_u` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id_u`),
  UNIQUE INDEX `id_u_UNIQUE` (`id_u` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `Jarvis`.`Proprietaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Proprietaire` (
  `id_pro` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `id_u_pro` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_pro`, `id_u_pro`),
  UNIQUE INDEX `id_pro_UNIQUE` (`id_pro` ASC) VISIBLE,
  UNIQUE INDEX `id_u_pro_UNIQUE` (`id_u_pro` ASC) VISIBLE,
  INDEX `fk_Proprietaire_Utilisateur_idx` (`id_u_pro` ASC) VISIBLE,
  CONSTRAINT `fk_Proprietaire_Utilisateur`
    FOREIGN KEY (`id_u_pro`)
    REFERENCES `Jarvis`.`Utilisateur` (`id_u`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `Jarvis`.`Domicile`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Domicile` (
  `id_domicile` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `anne_de_construction` YEAR NOT NULL DEFAULT '2000',
  `superficie` DOUBLE NULL DEFAULT '0',
  `id_pro_domicile` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_domicile`, `id_pro_domicile`),
  UNIQUE INDEX `id_domicile_UNIQUE` (`id_domicile` ASC) VISIBLE,
  INDEX `fk_Domicile_Proprietaire1_idx` (`id_pro_domicile` ASC) VISIBLE,
  CONSTRAINT `fk_Domicile_Proprietaire`
    FOREIGN KEY (`id_pro_domicile`)
    REFERENCES `Jarvis`.`Proprietaire` (`id_pro`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `Jarvis`.`Pieces`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Pieces` (
  `id_piece` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nom_piece` VARCHAR(45) NOT NULL,
  `id_domicile_piece` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_piece`, `id_domicile_piece`),
  UNIQUE INDEX `id_piece_UNIQUE` (`id_piece` ASC) VISIBLE,
  INDEX `fk_Pieces_Domicile1_idx` (`id_domicile_piece` ASC) VISIBLE,
  CONSTRAINT `fk_Pieces_Domicile1`
    FOREIGN KEY (`id_domicile_piece`)
    REFERENCES `Jarvis`.`Domicile` (`id_domicile`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `Jarvis`.`Appareils`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Appareils` (
  `id_appareil` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nom_appareil` VARCHAR(45) NOT NULL,
  `type_appareil` VARCHAR(45) NOT NULL,
  `id_piece_appareil` INT UNSIGNED NOT NULL,
  `id_domicile_piece_appareil` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_appareil`, `id_piece_appareil`, `id_domicile_piece_appareil`),
  UNIQUE INDEX `id_appareil_UNIQUE` (`id_appareil` ASC) VISIBLE,
  INDEX `fk_Appareils_Pieces1_idx` (`id_piece_appareil` ASC, `id_domicile_piece_appareil` ASC) VISIBLE,
  CONSTRAINT `fk_Appareils_Pieces`
    FOREIGN KEY (`id_piece_appareil` , `id_domicile_piece_appareil`)
    REFERENCES `Jarvis`.`Pieces` (`id_piece` , `id_domicile_piece`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `Jarvis`.`CoProprietaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`CoProprietaire` (
  `id_copro` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `id_u_copro` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_copro`, `id_u_copro`),
  UNIQUE INDEX `id_copro_UNIQUE` (`id_copro` ASC) VISIBLE,
  UNIQUE INDEX `id_u_copro_UNIQUE` (`id_u_copro` ASC) VISIBLE,
  INDEX `fk_CoProprietaire_Utilisateur_idx` (`id_u_copro` ASC) VISIBLE,
  CONSTRAINT `fk_CoProprietaire_Utilisateur`
    FOREIGN KEY (`id_u_copro`)
    REFERENCES `Jarvis`.`Utilisateur` (`id_u`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `Jarvis`.`Habiter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Habiter` (
  `id_domicile` INT UNSIGNED NOT NULL,
  `id_u` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_domicile`, `id_u`),
  INDEX `fk_Utilisateur_Domicile_Habiter_idx` (`id_u` ASC) VISIBLE,
  INDEX `fk_Domicile_Utilisateur_Habiter_idx` (`id_domicile` ASC) VISIBLE,
  CONSTRAINT `fk_Domicile_Utilisateur_Habiter`
    FOREIGN KEY (`id_domicile`)
    REFERENCES `Jarvis`.`Domicile` (`id_domicile`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Utilisateur_Domicile_Habiter`
    FOREIGN KEY (`id_u`)
    REFERENCES `Jarvis`.`Utilisateur` (`id_u`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `Jarvis`.`Inviter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Inviter` (
  `id_u` INT UNSIGNED NOT NULL,
  `id_pro` INT UNSIGNED NOT NULL,
  `role_inviter` ENUM('0', '1') NOT NULL DEFAULT '0',
  `etat_invitation` ENUM('0', '1') NULL DEFAULT NULL,
  `date_ajout_invitation` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `validiter` ENUM('valide', 'invalide') NOT NULL DEFAULT 'valide',
  PRIMARY KEY (`id_u`, `id_pro`),
  INDEX `fk_Proprietaire_Inviter_Utilisateur_idx` (`id_pro` ASC) VISIBLE,
  INDEX `fk_Utilisateur_Inviter_Proprietaire_idx` (`id_u` ASC) VISIBLE,
  CONSTRAINT `fk_Proprietaire_Inviter_Utilisateur`
    FOREIGN KEY (`id_pro`)
    REFERENCES `Jarvis`.`Proprietaire` (`id_pro`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Utilisateur_Inviter_Proprietaire`
    FOREIGN KEY (`id_u`)
    REFERENCES `Jarvis`.`Utilisateur` (`id_u`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `Jarvis`.`Membre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Membre` (
  `id_m` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `lien_parente` INT NOT NULL DEFAULT '0',
  `id_u_membre` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_m`, `id_u_membre`),
  UNIQUE INDEX `id_m_UNIQUE` (`id_m` ASC) VISIBLE,
  UNIQUE INDEX `id_u_membre_UNIQUE` (`id_u_membre` ASC) VISIBLE,
  INDEX `fk_Membre_Utilisateur_idx` (`id_u_membre` ASC) VISIBLE,
  CONSTRAINT `fk_Membre_Utilisateur`
    FOREIGN KEY (`id_u_membre`)
    REFERENCES `Jarvis`.`Utilisateur` (`id_u`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb3;

USE `Jarvis` ;

-- -----------------------------------------------------
-- Placeholder table for view `Jarvis`.`Liste_Appareil_Domicile`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Liste_Appareil_Domicile` (`ID_Domicile` INT, `ID_Appareils` INT, `NOM_Appareils` INT, `TYPE_Appareils` INT, `PIECE_DOMICILE` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Jarvis`.`Liste_Appareil_Piece`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Liste_Appareil_Piece` (`ID_Piece` INT, `Nom_Piece` INT, `ID_Appareil` INT, `Nom_Appareil` INT, `Type_Appareil` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Jarvis`.`Liste_Coproprietaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Liste_Coproprietaire` (`ID_Coproprietaire` INT, `ID_Utilisateur` INT, `Prenom` INT, `Nom` INT, `Date_de_naissance` INT, `Email` INT, `Sexe` INT, `Mots_de_passe` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Jarvis`.`Liste_Invitation_Attente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Liste_Invitation_Attente` (`id_u` INT, `id_pro` INT, `role_inviter` INT, `etat_invitation` INT, `date_ajout_invitation` INT, `validiter` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Jarvis`.`Liste_Membre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Liste_Membre` (`ID_Membre` INT, `Id_Utilisateur` INT, `Prenoms` INT, `Nom` INT, `Date_de_naissance` INT, `Email` INT, `Sexe` INT, `Mots_de_passe` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Jarvis`.`Liste_Piece_Domicile`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Liste_Piece_Domicile` (`ID_Domicile` INT, `ID_PIECE` INT, `Nom_Piece` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Jarvis`.`Liste_Proprietaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Liste_Proprietaire` (`ID_Proprietaire` INT, `ID_Utilisateur` INT, `Prenom` INT, `Nom` INT, `Date_de_naissance` INT, `Email` INT, `Sexe` INT, `Mots_de_passe` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Jarvis`.`Liste_Proprietaire_Coproprietaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Liste_Proprietaire_Coproprietaire` (`id_u` INT, `prenom_u` INT, `nom_u` INT, `date_de_naissance` INT, `email_u` INT, `sexe` INT, `mdp_u` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Jarvis`.`Liste_Utilisateur_Domicile`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Jarvis`.`Liste_Utilisateur_Domicile` (`ID_Domicile` INT, `ID_Utilisateur` INT, `Prenom` INT, `Nom` INT, `Email` INT, `Date_de_naissance` INT, `Sexe` INT);

-- -----------------------------------------------------
-- View `Jarvis`.`Liste_Appareil_Domicile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Jarvis`.`Liste_Appareil_Domicile`;
USE `Jarvis`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `Jarvis`.`Liste_Appareil_Domicile` AS select `Jarvis`.`Pieces`.`id_domicile_piece` AS `ID_Domicile`,`Jarvis`.`Appareils`.`id_appareil` AS `ID_Appareils`,`Jarvis`.`Appareils`.`nom_appareil` AS `NOM_Appareils`,`Jarvis`.`Appareils`.`type_appareil` AS `TYPE_Appareils`,`Jarvis`.`Pieces`.`nom_piece` AS `PIECE_DOMICILE` from (`Jarvis`.`Appareils` join `Jarvis`.`Pieces` on((`Jarvis`.`Appareils`.`id_piece_appareil` = `Jarvis`.`Pieces`.`id_piece`))) order by `Jarvis`.`Pieces`.`id_domicile_piece`,`Jarvis`.`Appareils`.`id_appareil`;

-- -----------------------------------------------------
-- View `Jarvis`.`Liste_Appareil_Piece`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Jarvis`.`Liste_Appareil_Piece`;
USE `Jarvis`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `Jarvis`.`Liste_Appareil_Piece` AS select `Jarvis`.`Pieces`.`id_piece` AS `ID_Piece`,`Jarvis`.`Pieces`.`nom_piece` AS `Nom_Piece`,`Jarvis`.`Appareils`.`id_appareil` AS `ID_Appareil`,`Jarvis`.`Appareils`.`nom_appareil` AS `Nom_Appareil`,`Jarvis`.`Appareils`.`type_appareil` AS `Type_Appareil` from (`Jarvis`.`Pieces` join `Jarvis`.`Appareils`) where (`Jarvis`.`Appareils`.`id_piece_appareil` = `Jarvis`.`Pieces`.`id_piece`) order by `Jarvis`.`Pieces`.`id_piece`,`Jarvis`.`Pieces`.`id_domicile_piece`,`Jarvis`.`Appareils`.`id_appareil`;

-- -----------------------------------------------------
-- View `Jarvis`.`Liste_Coproprietaire`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Jarvis`.`Liste_Coproprietaire`;
USE `Jarvis`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `Jarvis`.`Liste_Coproprietaire` AS select `Jarvis`.`CoProprietaire`.`id_copro` AS `ID_Coproprietaire`,`Jarvis`.`CoProprietaire`.`id_u_copro` AS `ID_Utilisateur`,`Jarvis`.`Utilisateur`.`prenom_u` AS `Prenom`,`Jarvis`.`Utilisateur`.`nom_u` AS `Nom`,`Jarvis`.`Utilisateur`.`date_de_naissance` AS `Date_de_naissance`,`Jarvis`.`Utilisateur`.`email_u` AS `Email`,`Jarvis`.`Utilisateur`.`sexe` AS `Sexe`,`Jarvis`.`Utilisateur`.`mdp_u` AS `Mots_de_passe` from (`Jarvis`.`CoProprietaire` join `Jarvis`.`Utilisateur`) where (`Jarvis`.`CoProprietaire`.`id_u_copro` = `Jarvis`.`Utilisateur`.`id_u`);

-- -----------------------------------------------------
-- View `Jarvis`.`Liste_Invitation_Attente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Jarvis`.`Liste_Invitation_Attente`;
USE `Jarvis`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `Jarvis`.`Liste_Invitation_Attente` AS select `Jarvis`.`Inviter`.`id_u` AS `id_u`,`Jarvis`.`Inviter`.`id_pro` AS `id_pro`,`Jarvis`.`Inviter`.`role_inviter` AS `role_inviter`,`Jarvis`.`Inviter`.`etat_invitation` AS `etat_invitation`,`Jarvis`.`Inviter`.`date_ajout_invitation` AS `date_ajout_invitation`,`Jarvis`.`Inviter`.`validiter` AS `validiter` from `Jarvis`.`Inviter` where (`Jarvis`.`Inviter`.`validiter` = 'valide');

-- -----------------------------------------------------
-- View `Jarvis`.`Liste_Membre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Jarvis`.`Liste_Membre`;
USE `Jarvis`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `Jarvis`.`Liste_Membre` AS select `Jarvis`.`Membre`.`id_m` AS `ID_Membre`,`Jarvis`.`Membre`.`id_u_membre` AS `Id_Utilisateur`,`Jarvis`.`Utilisateur`.`prenom_u` AS `Prenoms`,`Jarvis`.`Utilisateur`.`nom_u` AS `Nom`,`Jarvis`.`Utilisateur`.`date_de_naissance` AS `Date_de_naissance`,`Jarvis`.`Utilisateur`.`email_u` AS `Email`,`Jarvis`.`Utilisateur`.`sexe` AS `Sexe`,`Jarvis`.`Utilisateur`.`mdp_u` AS `Mots_de_passe` from (`Jarvis`.`Membre` join `Jarvis`.`Utilisateur`) where (`Jarvis`.`Membre`.`id_u_membre` = `Jarvis`.`Utilisateur`.`id_u`);

-- -----------------------------------------------------
-- View `Jarvis`.`Liste_Piece_Domicile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Jarvis`.`Liste_Piece_Domicile`;
USE `Jarvis`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `Jarvis`.`Liste_Piece_Domicile` AS select `Jarvis`.`Domicile`.`id_domicile` AS `ID_Domicile`,`Jarvis`.`Pieces`.`id_piece` AS `ID_PIECE`,`Jarvis`.`Pieces`.`nom_piece` AS `Nom_Piece` from (`Jarvis`.`Pieces` join `Jarvis`.`Domicile` on((`Jarvis`.`Pieces`.`id_domicile_piece` = `Jarvis`.`Domicile`.`id_domicile`))) order by `Jarvis`.`Domicile`.`id_domicile`,`Jarvis`.`Pieces`.`id_piece`;

-- -----------------------------------------------------
-- View `Jarvis`.`Liste_Proprietaire`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Jarvis`.`Liste_Proprietaire`;
USE `Jarvis`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `Jarvis`.`Liste_Proprietaire` AS select `Jarvis`.`Proprietaire`.`id_pro` AS `ID_Proprietaire`,`Jarvis`.`Proprietaire`.`id_u_pro` AS `ID_Utilisateur`,`Jarvis`.`Utilisateur`.`prenom_u` AS `Prenom`,`Jarvis`.`Utilisateur`.`nom_u` AS `Nom`,`Jarvis`.`Utilisateur`.`date_de_naissance` AS `Date_de_naissance`,`Jarvis`.`Utilisateur`.`email_u` AS `Email`,`Jarvis`.`Utilisateur`.`sexe` AS `Sexe`,`Jarvis`.`Utilisateur`.`mdp_u` AS `Mots_de_passe` from (`Jarvis`.`Proprietaire` join `Jarvis`.`Utilisateur`) where (`Jarvis`.`Proprietaire`.`id_u_pro` = `Jarvis`.`Utilisateur`.`id_u`);

-- -----------------------------------------------------
-- View `Jarvis`.`Liste_Proprietaire_Coproprietaire`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Jarvis`.`Liste_Proprietaire_Coproprietaire`;
USE `Jarvis`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `Jarvis`.`Liste_Proprietaire_Coproprietaire` AS select `Jarvis`.`Utilisateur`.`id_u` AS `id_u`,`Jarvis`.`Utilisateur`.`prenom_u` AS `prenom_u`,`Jarvis`.`Utilisateur`.`nom_u` AS `nom_u`,`Jarvis`.`Utilisateur`.`date_de_naissance` AS `date_de_naissance`,`Jarvis`.`Utilisateur`.`email_u` AS `email_u`,`Jarvis`.`Utilisateur`.`sexe` AS `sexe`,`Jarvis`.`Utilisateur`.`mdp_u` AS `mdp_u` from (`Jarvis`.`Utilisateur` join `Jarvis`.`CoProprietaire` on((`Jarvis`.`Utilisateur`.`id_u` = `Jarvis`.`CoProprietaire`.`id_u_copro`))) union select `Jarvis`.`Utilisateur`.`id_u` AS `id_u`,`Jarvis`.`Utilisateur`.`prenom_u` AS `prenom_u`,`Jarvis`.`Utilisateur`.`nom_u` AS `nom_u`,`Jarvis`.`Utilisateur`.`date_de_naissance` AS `date_de_naissance`,`Jarvis`.`Utilisateur`.`email_u` AS `email_u`,`Jarvis`.`Utilisateur`.`sexe` AS `sexe`,`Jarvis`.`Utilisateur`.`mdp_u` AS `mdp_u` from (`Jarvis`.`Utilisateur` join `Jarvis`.`Proprietaire` on((`Jarvis`.`Utilisateur`.`id_u` = `Jarvis`.`Proprietaire`.`id_u_pro`)));

-- -----------------------------------------------------
-- View `Jarvis`.`Liste_Utilisateur_Domicile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Jarvis`.`Liste_Utilisateur_Domicile`;
USE `Jarvis`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `Jarvis`.`Liste_Utilisateur_Domicile` AS select `Jarvis`.`Habiter`.`id_domicile` AS `ID_Domicile`,`Jarvis`.`Utilisateur`.`id_u` AS `ID_Utilisateur`,`Jarvis`.`Utilisateur`.`prenom_u` AS `Prenom`,`Jarvis`.`Utilisateur`.`nom_u` AS `Nom`,`Jarvis`.`Utilisateur`.`email_u` AS `Email`,`Jarvis`.`Utilisateur`.`date_de_naissance` AS `Date_de_naissance`,`Jarvis`.`Utilisateur`.`sexe` AS `Sexe` from (`Jarvis`.`Habiter` join `Jarvis`.`Utilisateur` on((`Jarvis`.`Utilisateur`.`id_u` = `Jarvis`.`Habiter`.`id_u`))) order by `Jarvis`.`Habiter`.`id_domicile`;
USE `Jarvis`;

-- -------------------------------------------------
-- TRIGGER
-- -------------------------------------------------

-- -------------------------------------------------
-- TRIGGER PROPRIETAIRE AFTER_INSERT
-- -------------------------------------------------

DELIMITER $$
USE `Jarvis`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `Jarvis`.`Proprietaire_AFTER_INSERT`
AFTER INSERT ON `Jarvis`.`Proprietaire`
FOR EACH ROW
BEGIN
    INSERT INTO `Jarvis`.`Domicile` (id_pro_domicile) VALUES (NEW.id_pro);
    INSERT INTO `Jarvis`.`Habiter` (id_u,id_omicile) VALUES (NEW.id_pro,(SELECT id_domicile From Domicile WHERE Domicile.id_pro_domicile=NEW.id_pro));
END$$

-- -------------------------------------------------
-- TRIGGER PROPRIETAIRE BEFORE DELETE
-- -------------------------------------------------

USE `Jarvis`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `Jarvis`.`Proprietaire_BEFORE_DELETE`
BEFORE DELETE ON `Jarvis`.`Proprietaire`
FOR EACH ROW
BEGIN
    SET @Modif = (SELECT id_u 
    FROM Jarvis.Habiter
    INNER JOIN Jarvis.CoProprietaire
    ON Jarvis.Habiter.id_domicile =(SELECT Domicile.id_domicile  WHERE Domicile.id_pro_domicile = OLD.id_pro)  and Jarvis.Habiter.id_u != OLD.id_u_pro
    limit 1);
    IF @Modif IS NOT NULL THEN
        UPDATE Domicile SET id_pro_domicile=@Modif WHERE id_pro_domicile=OLD.id_u_pro;
    ELSE
        SET @Modif =(SELECT id_u 
        FROM Jarvis.Habiter
        INNER JOIN Jarvis.Membre
        ON Jarvis.Habiter.id_domicile =(SELECT Domicile.id_domicile  WHERE Domicile.id_pro_domicile = OLD.id_pro)  and Jarvis.Habiter.id_u != OLD.id_u_pro 
        LIMIT 1);
        IF @Modif IS NOT NULL THEN
            UPDATE Domicile SET id_pro_domicile=@Modif WHERE id_pro_domicile=OLD.id_u_pro;
        END IF;
    END IF;
END$$

-- -------------------------------------------------
-- TRIGGER Inviter BEFORE UPDATE
-- -------------------------------------------------

USE `Jarvis`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `Jarvis`.`Inviter_BEFORE_UPDATE`
BEFORE UPDATE ON `Jarvis`.`Inviter`
FOR EACH ROW
BEGIN
    IF (timestampdiff(MINUTE,NEW.`date_ajout_invitation`,current_timestamp())>120) THEN
        SET NEW.validiter = 'invalide';
        SET NEW.`etat_invitation`=OLD.`etat_invitation`;
    ELSEIF (NEW.validiter != 'invalide') THEN
        SET NEW.validiter = 'invalide';
        IF (NEW.`etat_invitation`='1') THEN 
            DELETE FROM `Jarvis`.`Habiter` WHERE `Habiter`.`id_u` = NEW.`id_u`; -- Supression dans l'ancien Habitation
            INSERT IGNORE INTO `Jarvis`.`Habiter` (id_domicile,id_u) -- Insertion dans la nouvelle Habitation
            VALUE (NEW.`id_u`, (SELECT id_domicile FROM `Jarvis`.`Domicile` WHERE `Domicile`.`id_pro_domicile`= NEW.`id_pro`));
            IF (NEW.`role_inviter`='0') THEN
                INSERT IGNORE INTO `Jarvis`.`Membre` (id_u_membre) 
                VALUES  (NEW.`id_u`);
            ELSEIF (NEW.`role_inviter`='1') THEN
                INSERT IGNORE INTO `Jarvis`.`CoProprietaire` (id_u_copro) 
                VALUES  (NEW.`id_u`);
            END IF;
        END IF;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
